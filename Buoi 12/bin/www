#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const debug = require('debug')('myapp:server');
require('dotenv').config();
const { app, sequelize } = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port;  // port number
  return false;
}

const port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Connect DB and start server.
 */
(async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
    console.log('‚úÖ Database connected & synced.');

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (err) {
    console.error('‚ùå Failed to start server:', err);
    process.exit(1);
  }
})();

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(`‚ùå ${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`‚ùå ${bind} is already in use`);
      console.log('\nüëâ To free the port, use one of the following:');
      console.log(`   PowerShell (Admin): Stop-Process -Id (Get-NetTCPConnection -LocalPort ${port}).OwningProcess -Force`);
      console.log(`   CMD: netstat -ano | findstr :${port}`);
      console.log('        taskkill /PID <PID> /F');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`‚úÖ Server running at http://localhost:${port}/`);
}
